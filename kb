project.

aim(project, 'Provide a high level language able to express a musical accompaniment in few lines without the need to write every note').

language.
lexer.
parser.
model.
composedBy(language, lexer).
composedBy(language, parser).
composedBy(language, model).
package(lexer, 'org.fergonco.music.mjargon.lexer').
package(parser, 'org.fergonco.music.mjargon.parser').
package(model, 'org.fergonco.music.mjargon.model').

/* Model */
variableDefinitions.
barlines.
labels.
instruments.
composedBy(model, variableDefinitions).
composedBy(model, instruments).
composedBy(model, barlines).
composedBy(model, labels).

	/* variableDefinitions */
	timeSignatures.
	rhythms.
	chordProgressions.
	noteSequences.
	isTypeOf(timeSignatures, variableDefinitions).
	isTypeOf(rhythms, variableDefinitions).
	isTypeOf(chordProgressions, variableDefinition).
	isTypeOf(noteSequences, variableDefinition).
	
		/* rhythms */
		durations.
		composedBy(rhythms, durations).
		composedBy(rhythms, timeSignatures).
		
		/* note sequences */
		polyphonicNoteSequences.
		monophonicNoteSequences.
		isTypeOf(polyphonicNoteSequences, noteSequences).
		isTypeOf(monophonicNoteSequences, noteSequences).

		/* monophonicNoteSequences */
		chord.
		composedBy(chord, polyphonicNoteSequences).
		composedBy(chord, index).
		composedBy(monophonicNoteSequences, indices).
		composedBy(monophonicNoteSequences, chord).

	/* barlines */
	composedBy(barlines, noteSequences).
	composedBy(barlines, index).
